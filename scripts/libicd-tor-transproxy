#!/bin/sh
GCONF_PATH="/system/osso/connectivity/providers/tor"

usage() {
	echo "usage: $(basename "$0") enable|disable [config_name]"
	exit 1
}

# $1 = enable|disable
# $2 = config_name
# $3 = network interface
if [ -z "$1" ] || [ -z "$2" ]; then # || [ -z "$3" ]; then
	usage
fi

die() {
	# TODO: Maybe try to restore old iptables here if something didn't succeed?
	echo "$*" >&2
	exit 1
}

gconf_dir_exists() {
	su -- user -c "gconftool --dir-exists $1"
}

gconf_get() {
	value="$(su -- user -c "gconftool -g $1")"
	# gconftool returns 0 if it fails to get something, so we check here
	if [ -z "$value" ]; then
		return 1
	fi

	printf "%s" "$value"
}

enable_transproxy() {
	config_name="$1"
	config_path="$GCONF_PATH/$config_name"
	#net_iface="$2"
	# Tor's VirtualAddrNetworkIPv4
	virt_addr="10.192.0.0/10"

	gconf_dir_exists "$config_path" \
		|| die "Config $config_path doesn't exist"

	tor_uid="$(id -u debian-tor)" \
		|| die "No user debian-tor"

	trans_port="$(gconf_get "$config_path/trans-port")" \
		|| die "Failed to get $config_path/trans-port"

	dns_port="$(gconf_get "$config_path/dns-port")" \
		|| die "Failed to get $config_path/dns-port"

	cat <<EOF | nft -f /dev/stdin
# Verify your network interface with ip addr
#define interface = ${net_iface}
# Verify tor uid with id -u tor
define uid = ${tor_uid}

table ip nat {
    set unrouteables {
    type ipv4_addr
    flags interval
    elements = { 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16,
                 0.0.0.0/8, 100.64.0.0/10, 169.254.0.0/16, 192.0.0.0/24,
                 192.0.2.0/24, 192.88.99.0/24, 198.18.0.0/15, 198.51.100.0/24,
                 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4 }
    }

    chain POSTROUTING {
        type nat hook postrouting priority 100; policy accept;
    }

    chain OUTPUT {
        type nat hook output priority -100; policy accept;
        meta l4proto tcp ip daddr ${virt_addr} redirect to :${trans_port}
        meta l4proto udp ip daddr 127.0.0.1 udp dport 53 redirect to :${dns_port}
        skuid \$uid return
        oifname "lo" return
        ip daddr @unrouteables return
        meta l4proto tcp redirect to :${trans_port}
    }
}

table ip filter {
    set private {
        type ipv4_addr
        flags interval
        elements = { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 127.0.0.0/8 }
    }

    chain INPUT {
        type filter hook input priority 0; policy drop;
        # Allow Local SSH connections
        #iifname \$interface meta l4proto tcp tcp dport 22 ct state new accept
        meta l4proto tcp tcp dport 22 ct state new accept
        ct state established accept
        iifname "lo" accept
        ip saddr @private accept
    }

    chain FORWARD {
        type filter hook forward priority 0; policy drop;
    }

    chain OUTPUT {
        type filter hook output priority 0; policy drop;
        ct state established accept
        #oifname \$interface meta l4proto tcp skuid \$uid ct state new accept
        meta l4proto tcp skuid \$uid ct state new accept
        oifname "lo" accept
        ip daddr @private accept
    }
}
EOF
}

disable_transproxy() {
	nft -f /etc/nftables.conf
}

case "$1" in
enable)
	#enable_transproxy "$2" "$3" || exit 1
	enable_transproxy "$2" || exit 1
	exit 0
	;;
disable)
	#disable_transproxy "$2" "$3" || exit 1
	disable_transproxy "$2" || exit 1
	exit 0
	;;
esac

usage
